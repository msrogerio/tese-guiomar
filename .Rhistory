shape[0][1]
estimate = (fw$estimate)
estimate
estimate = c(fw$estimate)
estimate
estimate = idex(fw$estimate)
estimate = index(fw$estimate)
estimate = index2wealth(fw$estimate)
estimate = (fw$estimate)
estimate
estimate['shape']
estimate['scale']
estimate['scale'].valeu()
estimate['scale']$scale
estimate = (fw$estimate, replace=TRUE)
estimate = c(fw$estimate)
estimate['scale']$scale
estimate['scale']
estimate['scale'][0]
estimate['scale'][1]
estimate('scale')
getElement(estimate, "shape")
shape = getElement(estimate, "scale")
scale
scale = getElement(estimate, "scale")
scale
scale = getElement(estimate, "scale") - 200
getElement(estimate, "scale") - 200
N = 10
SHAPE = NULL
DIFERENCA_SHAPE = NULL
SCALE = NULL
for (i in 1:N){
y = rweibull(n, shape = 50, scale = 100)S
estimate = fw$estimate
SHAPE[i] = getElement(estimate, "shape")
DIFERENCA_SHAPE[i] = SHAPE[i] - getElement(estimate, "shape")
SCALE[i] = getElement(estimate, "scale")
DIFERENCA_SCALE[i] = SCALE[i] - getElement(estimate, "scale")
}
for (i in 1:N){
y = rweibull(n, shape = 50, scale = 100)
fw = fitdist(y, "weibull")
estimate = fw$estimate
SHAPE[i] = getElement(estimate, "shape")
DIFERENCA_SHAPE[i] = SHAPE[i] - getElement(estimate, "shape")
SCALE[i] = getElement(estimate, "scale")
DIFERENCA_SCALE[i] = SCALE[i] - getElement(estimate, "scale")
}
N = 10
SHAPE = NULL
DIFERENCA_SHAPE = NULL
SCALE = NULL
DIFERENCA_SCALE = NULL
for (i in 1:N){
y = rweibull(n, shape = 50, scale = 100)
fw = fitdist(y, "weibull")
estimate = fw$estimate
SHAPE[i] = getElement(estimate, "shape")
DIFERENCA_SHAPE[i] = SHAPE[i] - getElement(estimate, "shape")
SCALE[i] = getElement(estimate, "scale")
DIFERENCA_SCALE[i] = SCALE[i] - getElement(estimate, "scale")
}
Tabela <- data.frame(
"Média Shape" = c(mean(SHAPE), mean(DIFERENCA_SHAPE)),
"Média Scale" = c(mean(SCALE), mean(DIFERENCA_SCALE))
)
Tabela
N = 10
SHAPE = NULL
DIFERENCA_SHAPE = NULL
SCALE = NULL
DIFERENCA_SCALE = NULL
for (i in 1:N){
y = rweibull(n, shape = 50, scale = 100)
fw = fitdist(y, "weibull")
estimate = fw$estimate
SHAPE[i] = getElement(estimate, "shape")
DIFERENCA_SHAPE[i] = SHAPE[i] - 50
SCALE[i] = getElement(estimate, "scale")
DIFERENCA_SCALE[i] = SCALE[i] - 100
}
REP = 10
SHAPE = NULL
DIFERENCA_SHAPE = NULL
SCALE = NULL
DIFERENCA_SCALE = NULL
n = 10
for (i in 1:REP){
y = rweibull(n, shape = 50, scale = 100)
fw = fitdist(y, "weibull")
estimate = fw$estimate
SHAPE[i] = getElement(estimate, "shape")
DIFERENCA_SHAPE[i] = SHAPE[i] - 50
SCALE[i] = getElement(estimate, "scale")
DIFERENCA_SCALE[i] = SCALE[i] - 100
}
Tabela <- data.frame(
"Média Shape" = c(mean(SHAPE), mean(DIFERENCA_SHAPE)),
"Média Scale" = c(mean(SCALE), mean(DIFERENCA_SCALE))
)
Tabela
install.packages("fitdistrplus")
require (fitdistrplus)
n = 10
y = rweibull(n, shape = 50, scale = 100)
n = 10
y = rweibull(n, shape = 50, scale = 100)
hist(y)
y = rweibull(n, shape = 50, scale = 100)
hist(y)
y = rweibull(n, shape = 50, scale = 100)
hist(y)
fw = fitdist(y, "weibull")
summary(fw)
n = 100
y = rweibull(n, shape = 50, scale = 100)
hist(y)
summary(fw)
y = rweibull(n, shape = 50, scale = 100)
n = 1000
y = rweibull(n, shape = 50, scale = 100)
hist(y)
source("~/apps/envelope_simulado/weibull.R", echo=TRUE)
fw = fitdist(y, "weibull")
summary(fw)
REP = 10
SHAPE = NULL
DIFERENCA_SHAPE = NULL
SCALE = NULL
DIFERENCA_SCALE = NULL
n = 100
for (i in 1:REP){
y = rweibull(n, shape = 50, scale = 100)
fw = fitdist(y, "weibull")
estimate = fw$estimate
SHAPE[i] = getElement(estimate, "shape")
DIFERENCA_SHAPE[i] = SHAPE[i] - 50
SCALE[i] = getElement(estimate, "scale")
DIFERENCA_SCALE[i] = SCALE[i] - 100
}
Tabela <- data.frame(
"Média Shape" = c(mean(SHAPE), mean(DIFERENCA_SHAPE)),
"Média Scale" = c(mean(SCALE), mean(DIFERENCA_SCALE))
)
Tabela
n = 1000
for (i in 1:REP){
y = rweibull(n, shape = 50, scale = 100)
fw = fitdist(y, "weibull")
estimate = fw$estimate
SHAPE[i] = getElement(estimate, "shape")
DIFERENCA_SHAPE[i] = SHAPE[i] - 50
SCALE[i] = getElement(estimate, "scale")
DIFERENCA_SCALE[i] = SCALE[i] - 100
}
Tabela <- data.frame(
"Média Shape" = c(mean(SHAPE), mean(DIFERENCA_SHAPE)),
"Média Scale" = c(mean(SCALE), mean(DIFERENCA_SCALE))
)
Tabela
flm = fitdist(y, "lnorm")
fln = fitdist(y, "lnorm")
n = 1000
y = rweibull(n, shape = 50, scale = 100)
hist(y)
fw = fitdist(y, "weibull")
fg = fitdist(y, "gamma")
fln = fitdist(y, "lnorm")
par(mfrow*c(2,2))
par(mfrow=c(2,2))
plot.legend <- c("weibull", "gamma", "lnorm")
denscomp(list(fw, fg, fln), legendtext=plot.legend)
qqcomp(list(fw, fg, fln), legendtext=plot.legend)
cdfcomp(list(fw, fg, fln), legendtext=plot.legend)
ppcomp(list(fw, fg, fln), legendtext=plot.legend)
install.packages("fitdistrplus")
require (fitdistrplus)
n = 1000
y = rweibull(n, shape = 50, scale = 100)
y
hist(y)
fw = fitdist(y, "weibull")
fg = fitdist(y, "gamma")
fln = fitdist(y, "lnorm")
summary(fw)
par(mfrow=c(2,2))
plot.legend <- c("weibull", "gamma", "lnorm")
denscomp(list(fw, fg, fln), legendtext=plot.legend)
qqcomp(list(fw, fg, fln), legendtext=plot.legend)
cdfcomp(list(fw, fg, fln), legendtext=plot.legend)
ppcomp(list(fw, fg, fln), legendtext=plot.legend)
y
n = 1000
y = rweibull(n, shape = 50, scale = 100)
y
summary(fw)
(fw)
par(mfrow=c(2,2))
plot.legend <- c("weibull", "gamma", "lnorm")
denscomp(list(fw, fg, fln), legendtext=plot.legend)
qqcomp(list(fw, fg, fln), legendtext=plot.legend)
require (fitdistrplus)
n = 1000
y = rweibull(n, shape = 50, scale = 100)
y
hist(y)
fw = fitdist(y, "weibull")
fg = fitdist(y, "gamma")
fln = fitdist(y, "lnorm")
par(mfrow=c(2,2))
plot.legend <- c("weibull", "gamma", "lnorm")
denscomp(list(fw, fg, fln), legendtext=plot.legend)
qqcomp(list(fw, fg, fln), legendtext=plot.legend)
cdfcomp(list(fw, fg, fln), legendtext=plot.legend)
ppcomp(list(fw, fg, fln), legendtext=plot.legend)
#estimate = fw$estimate
#shape = getElement(estimate, "shape")
#scale = getElement(estimate, "scale")
#scale
plot(fw)
REP = 10
SHAPE = NULL
DIFERENCA_SHAPE = NULL
SCALE = NULL
DIFERENCA_SCALE = NULL
n = 1000
for (i in 1:REP){
y = rweibull(n, shape = 50, scale = 100)
fw = fitdist(y, "weibull")
estimate = fw$estimate
SHAPE[i] = getElement(estimate, "shape")
DIFERENCA_SHAPE[i] = SHAPE[i] - 50
SCALE[i] = getElement(estimate, "scale")
DIFERENCA_SCALE[i] = SCALE[i] - 100
}
Tabela <- data.frame(
"Média Shape" = c(mean(SHAPE), mean(DIFERENCA_SHAPE)),
"Média Scale" = c(mean(SCALE), mean(DIFERENCA_SCALE))
)
Tabela
n = 1000
n = 1000
y = rweibull(n, shape = 50, scale = 100)
y
hist(y)
#par(mfrow=c(2,2))
plot.legend <- c("weibull", "gamma", "lnorm")
denscomp(list(fw, fg, fln), legendtext=plot.legend)
fw = fitdist(y, "weibull")
fg = fitdist(y, "gamma")
fln = fitdist(y, "lnorm")
denscomp(list(fw, fg, fln), legendtext=plot.legend)
y = rweibull(n, shape = 50, scale = 100)
y
hist(y)
fw = fitdist(y, "weibull")
fg = fitdist(y, "gamma")
fln = fitdist(y, "lnorm")
#par(mfrow=c(2,2))
plot.legend <- c("weibull", "gamma", "lnorm")
denscomp(list(fw, fg, fln), legendtext=plot.legend)
if(length(new.packages)) install.packages(new.packages)
list.of.packages <- c("mvtnorm", "statmod", "scatterplot3d", "GHQp")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
require(statmod)
# Montagem dos pontos para quadratura de gauss-hermite
quad <- gauss.quad(n=5, kind="hermite")
quad
# Defining g1(x)
g1<- function(x) exp(-(x-1)^2)
# Montar afigura (1)
curve(g1, -4, 6, ylim=c(0,1), ylab=expression(g[1](x)), las=1)
# Adding the quadrature points
points(x=quad$nodes, y=rep(0,5), pch=19, cex=1.2)
legend('topright', bty='n', legend='Quadrature points', pch=19, pt.cex=1.2)
# True value with integrate function
integrate(f=g1, lower=-Inf, upper=Inf)
# Approximating the integral of g1(x) by expression (1)
sum(quad$weights * g1(quad$nodes) * exp(quad$nodes^2))
g2 <- function(x)x^2*exp(-x^2)
# To obtain figure (2)
curve(g2, -4, 4, ylim=c(0,0.4), ylab=expression(g[1](x)), las=1)
# Adding the quadrature points
points(x=quad$nodes, y=rep(0,5), pch=19, cex=1.2)
legend('topright', bty='n', legend='Quadrature points', pch=19, pt.cex=1.2)
# Approximating the integral of g1(x) by expression (1)
sum(quad$weights * g2(quad$nodes) * exp(quad$nodes^2))
library(optinmx)
# A distribuição normal tem 2 para
n <- 20
y <- rnorm(n=n, mean=10, sd=100)
mean(y)
sd(y)
ll_norm <- function(y, theta){
ll <- dnorm(y, theta[1], theta[2], log=TRUE)
-sum(ll)
}
fit <- optim(par=c(mean(y),sd(y)), y=y, fn=ll_norm, method="BFGS", hessian=TRUE)
r <- 5000; n <- 1000
estimativas <- matrix(ncol=4, nrow=r)
for (i in 1:r){
y <- rnorm(n=n, mean=2, sd=3)
fit <- optim(par=c(1,1), fn=ll_norm, method="BFGS", hessian=TRUE)
estimativas[i, 1:2] <- fit$par
estimativas[i, 3:4] <- diag(n * solve(fit$hess))
}
require(dplyr)
require(reshape)
require(nlme)
require(rstatix)
require(gamlss)
require(esquisse)
require(hnp)
library(ggplot2)
ggplot(dados) +
aes(x = "", y = y, fill = Subject) +
geom_boxplot() +
scale_fill_manual(values = c(`1` = "#F8766D",
`2` = "#ACA000", `3` = "#00BB4C", `4` = "#00BAD5", `5` = "#918BFD", `6` = "#FF61C3")) +
theme_gray() +
facet_wrap(vars(tratt))
setwd("/Volumes/DADOS/Documentos/Mestrado /Estudo Orientado/Dados")
source.with.encoding("OLLST-gamlss.r", encoding = 'UTF-8')
dados = read.table("LV-C.txt", h = T)
View(dados)
dados$Tratamentos <- factor(dados$Tratamentos)
dados %>%
group_by(Tratamentos) %>%
shapiro_test(Carbono)
dados %>% group_by(Tratamentos) %>% shapiro_test(Carbono)
install.packages("rstatix")
install.packages("~/Downloads/rstatix_0.7.0.tar", repos = NULL)
install.packages("~/Downloads/rstatix_0.7.0.tar")
install.packages("~/Downloads/rstatix_0.7.0.tar", repos="https://rpkgs.datanovia.com/rstatix/")
install.packages("~/Downloads/rstatix_0.7.0.tar", repos="https://cran.r-project.org/package=rstatix")
require(rstatix)
dados %>% group_by(Tratamentos) %>%
identify_outliers(Carbono)
install.packages("rstatix")
require(rstatix)
ggplot(dados) +
aes(x = "", y = y, fill = Subject) +
geom_boxplot() +
scale_fill_manual(values = c(`1` = "#F8766D",
`2` = "#ACA000", `3` = "#00BB4C", `4` = "#00BAD5", `5` = "#918BFD", `6` = "#FF61C3")) +
theme_gray() +
facet_wrap(vars(tratt))
data(ergoStool)
require(lattice)
require(ggplot2)
require(dplyr)
require(reshape)
require(nlme)
require(gamlss)
require(esquisse)
require(hnp)
require(lattice)
require(ggplot2)
setwd("/Volumes/DADOS/Documentos/Mestrado /Estudo Orientado/Dados")
source.with.encoding("OLLST-gamlss.r", encoding = 'UTF-8')
dados = read.table("LV-C.txt", h = T)
View(dados)
colnames(dados) = c("Tratamentos", "Professor", "Época", "Carbono")
dados$Tratamentos <- factor(dados$Tratamentos)
dados %>% group_by(Tratamentos) %>%
identify_outliers(Carbono)
xyplot(Tratamentos~Carbono, groups=Época, data=dados, type=c("p", "a"))
xyplot(Tratamentos~Carbono, groups=Época, data=dados, type=c("r", "a"))
xyplot(Tratamentos~Carbono, groups=Época, data=dados, type=c("p", "a"))
xyplot(Tratamentos~Carbono|Época, groups=Época, data=dados, type=c("p", "a"))
esquisse:::esquisser()
names(dados)
carbono <- dados$Carbono
epoca <- dados$Época
tratamento <- dados$Tratamentos
professor <- dados$Professor
carbono
dados <- data.frame(carbono, tratamento, epoca)
dados
dados <- data.frame(carbono, tratamento, epoca)
dados
hist(dados)
hist(dados$carbono)
hist(x=dados$carbono,y=dados$tratamento)
hist(x=dados$carbono,y=dados$epoca)
hist(x=dados$carbono)
dados
dados <- data.frame(carbono, tratamento, epoca)
carbono <- as.factor(dados$Carbono)
epoca <- as.factor(dados$Época)
tratamento <- as.factor(dados$Tratamentos)
professor <- as.factor(dados$Professor)
dados <- data.frame(carbono, tratamento, epoca)
dados
dados
carbono
carbono <- dados$Carbono
epoca <- dados$Época
tratamento <- dados$Tratamentos
professor <- dados$Professor
dados <- data.frame(carbono, tratamento, epoca)
dados
dados
colnames(dados) = c("Tratamentos", "Professor", "Época", "Carbono")
dados$Tratamentos <- factor(dados$Tratamentos)
carbono <- dados$Carbono
epoca <- dados$Época
tratamento <- dados$Tratamentos
professor <- dados$Professor
dados <- data.frame(carbono, tratamento, epoca)
dados
setwd("/Volumes/DADOS/Documentos/Mestrado /Estudo Orientado/Dados")
source.with.encoding("OLLST-gamlss.r", encoding = 'UTF-8')
dados = read.table("LV-C.txt", h = T)
View(dados)
colnames(dados) = c("Tratamentos", "Professor", "Época", "Carbono")
dados$Tratamentos <- factor(dados$Tratamentos)
carbono <- dados$Carbono
epoca <- dados$Época
tratamento <- dados$Tratamentos
professor <- dados$Professor
dados <- data.frame(carbono, tratamento, epoca)
dados
t2 <-gamlss(y~carbono(fixed=~Tratamentos+Épocas:Tratamentos, random=~1|Tratamentos), data = dados, family = "OLLST")
t2 <-gamlss(carbono~tratamento(fixed=~Tratamentos+Épocas:Tratamentos, random=~1|Tratamentos), data = dados, family = "OLLST")
t2 <-gamlss(carbono~epoca(fixed=~ tratamento+epoca:tratamento, random=~1|tratamento), data = dados, family = "OLLST")
epoca <- dados$Época
carbono <- dados$Carbono
epoca <- dados$Época
tratamento <- dados$Tratamentos
professor <- dados$Professor
t2 <-gamlss(carbono~epoca(fixed=~ tratamento+epoca:tratamento, random=~1|tratamento), data = dados, family = "OLLST")
epoca
dados = read.table("LV-C.txt", h = T)
epoca <- dados$Época
epoca
dados = read.table("LV-C.txt", h = T)
colnames(dados) = c("Tratamentos", "Professor", "Época", "Carbono")
epoca <- dados$Época
epoca
carbono <- dados$Carbono
epoca <- dados$Época
epoca
tratamento <- dados$Tratamentos
professor <- dados$Professor
t2 <-gamlss(carbono~epoca(fixed=~ tratamento+epoca:tratamento, random=~1|tratamento), data = dados, family = "OLLST")
epoca
t2 <-gamlss(carbono~epoca(fixed=~ tratamento+epoca:tratamento, random=~1|tratamento), data = dados, family = "OLLST")
t2 <-gamlss(carbono~epoca(fixed=~ tratamento:tratamento, random=~1|tratamento), data = dados, family = "OLLST")
t2 <-gamlss(carbono~tratamento(fixed=~ tratamento+epoca:tratamento, random=~1|tratamento), data = dados, family = "OLLST")
t2 <-gamlss(carbono~tratamento(fixed=~tratamento+epoca:tratamento, random=~1|tratamento), data = dados, family = "OLLST")
t2 <-gamlss(carbono~tratamento(fixed=~tratamento+epoca:tratamento), data = dados, family = "OLLST")
t2 <-gamlss(carbono~professor(fixed=~tratamento+epoca:tratamento), data = dados, family = "OLLST")
t2 <-gamlss(carbono~re(fixed=~tratamento+epoca:tratamento), data = dados, family = "OLLST")
t2 <-gamlss(carbono~re(fixed=~tratamento+epoca:tratamento, random=~1|tratamento), data = dados, family = "OLLST")
install.packages("nortest")
if (!require('nortest')) install.packages('nortest')
if(!require('lawstar')) install.packages('lawstar')
if(!require('lawstar')) install.packages('lawstar')
if(!require('lawstar')) install.packages('lawstar')
if(!require('MASS')) install.packages('MASS')
if(!require('dplyr')) install.packages('dplyr')
if(!require('reshape')) install.packages('reshape')
if(!require('lawstar')) install.packages('lawstar')
if(!require('nlme')) install.packages('nlme')
if(!require('gamlss')) install.packages('gamlss')
if(!require('esquisse')) install.packages('esquisse')
clear
cls
if(!require('esquisse')) install.packages('esquisse')
if(!require('hnp')) install.packages('hnp')
if(!require('lattice')) install.packages('lattice')
if(!require('ggplot2')) install.packages('ggplot2')
setwd('/home/marlon-rogerio/apps/tese-guiomar/ollst.R')
setwd('/home/marlon-rogerio/apps/tese-guiomar')
# Apontamento do diretório de trabalho
setwd('/home/marlon-rogerio/apps/tese-guiomar')
# Carregamento do OLLST no projeto
source.with.encoding("OLLST-gamlss.r", encoding = 'UTF-8')
# Carregamento do OLLST no projeto
source.with.encoding("OLLST-gamlss.R", encoding = 'UTF-8')
# Importacao do dados
dados = read.table('r1.txt', h=T)
# Mostragem dos dados
View(dados)
# Verificar a normalidade da variável resposta no conjunto de dados
lillie.test(dados$RESP)
# Mostragem dos dados
View(dados)
# Importacao do dados
dados = read.table('r1.txt', h=T)
# Mostragem dos dados
View(dados)
# Importacao do dados
dados = read.table('r1.txt', h=T)
# Mostragem dos dados
View(dados)
# Verificar a normalidade da variável resposta no conjunto de dados
lillie.test(dados$RESP)
if(!require('esquisse')) install.packages('esquisse')
install.packages("esquisse")
if(!require('esquisse')) install.packages('esquisse')
install.packages("esquisse")
if(!require('ggplot2')) install.packages('ggplot2')
install.packages("~/Downloads/esquisse_1.1.2.tar.gz", repos = NULL, type = "source")
install.packages("datamods")
install.packages("rio")
install.packages("curl")
install.packages("curl")
if(!require('esquisse')) install.packages('esquisse')
